---
layout: post
title:  "Clang 17 now in dev container, and other toolchain news"
date:   2025-01-23
categories: cheri toolchain
author: Owen Anderson
---

Thanks to a collaboration with the [upstream CHERI toolchain](https://github.com/ctsrd-cheri/llvm-project), the CHERIoT toolchain has now been rebased onto Clang 17 from Clang 13, bringing us two years closer to upstream Clang. Major thanks to [Alex Richardson](https://github.com/arichardson) and [Sam Leffler](https://github.com/sleffler/) for their work on this effort!

This updates brings with it substantially improved support for C++20 features, as well as preliminary support for some C++23 and C23 features. It also brings with it many improvements to the core of the RISC-V code generator, notably also benefiting code size: the firmware image for the Cheriot RTOS testsuite is 2.7% smaller when built with Clang 17 compared to Clang 13. Other highlights include compile time improvements, and too many under-the-hood fixes to enumerate. You can find detailed release notes for all Clang and LLVM releases on the LLVM.org [releases page](https://releases.llvm.org).

## Other Toolchain Improvements

Since landing the Clang 17 rebase, we've been busy bringing bugfixes and enhancements to the CHERIoT toolchain, including:

### Language & Usability Improvements

- [Implemented](https://github.com/CHERIoT-Platform/llvm-project/commit/025c5d452e8935ebbe2a09d78fb2a10c1c96a626) a new Clang diagnostic to warn on compartment exports that return void, or where the return value is unused. These warnings are off by default until Cheriot RTOS has been updated for them, and are controlled by the `-Wcheri-compartment-return-void` compiler flag. Thanks to [Robert Dazi](https://github.com/v01dXYZ) for this one!
- [Allowed](https://github.com/CHERIoT-Platform/llvm-project/commit/0de0fb3e8f63be9102c5b5eab1b496415b667ca9) `cheri_libcall`-annotated functions to decay into unannotated function pointers. This is useful for passing the address of a `cheri_libcall` function as a callback.
- [Improved](https://github.com/CHERIoT-Platform/llvm-project/commit/b14e86345d929bf91ab3fb1197ac716dc7ca6e2d) linker error reporting if you accidentally omit the compartment export annotation on a declaration. LLD will now look for matching unexported functions and provide a suggested fix.

### Bugfixes

- [Fixed](https://github.com/CHERIoT-Platform/llvm-project/commit/60b4a582dfc1579b3c08c65d4b6ede961eb267f5) a recurring issue where the compiler would generated improperly mangled calls to `memcpy`, `memmove` and/or `memcmp` in specific circumstances, resulting in linker errors. This has now been fixed at the source.

### Optimizations
- [Taught](https://github.com/CHERIoT-Platform/llvm-project/commit/25ad11d7832237e81ca476d4e3e6bac2defc3fa7) the compiler to better optimize `CAndPerm` instructions, including constant folding and idempotence. This tends to benefit places where redundant `CAndPerm` instructions were generated by macros or C++ templates.
- [Freed](https://github.com/CHERIoT-Platform/llvm-project/commit/8221b74cffbfa03149eb5bab1776280ebb43785f) up the X4 register for the compiler's use in code generation. We haven't observed this making a significant performance or size difference, but some very compute-intensive code may benefit.

## Looking Forward

We have a number of further improvements that we expect to make available to CHERIoT toolchain users in the near future:

- [Supporting sealed capabilities](https://github.com/CHERIoT-Platform/llvm-project/pull/88) in the C type system. Once integrated with CHERIoT RTOS, we will be able to represent sealing, unsealing, and the propagation of sealed capabilities in a type-safe manner.
- [Re-enabling the MachineOutliner](https://github.com/CHERIoT-Platform/llvm-project/issues/46) size optimization. This will improve the firmware size on the CHERIoT RTOS testsuite by 4.4%, and will likely benefit other code bases similarly. However, this optimization uncovered an issue in the CHERIoT ISA related to return sentinels that has since been [fixed in the specification](https://github.com/CHERIoT-Platform/cheriot-sail/issues/85). If your development board does not contain the fix, you will need to pass `-enable-machine-outliner=never` to the compiler. We will add automatic support for enabling this flag when required to the CHERIoT RTOS build system prior to enabling the optimization by default.
- [Eliminating](https://github.com/CHERIoT-Platform/llvm-project/issues/58) the need to repeat the minimum stack size in both the annotation and in the stack check, improving the ergonomics significantly.
- [Improving code quality](https://github.com/CHERIoT-Platform/llvm-project/issues/85) for unaligned memory accesses. We've seen this particularly benefitting some cryptographic code.
- [Fixing linker errors](https://github.com/CHERIoT-Platform/llvm-project/issues/57) that arise when taking the address of non-exported, non-libcall functions with non-default interrupt state annotations.
- [Adding support](https://github.com/CHERIoT-Platform/llvm-project/issues/38) for "temporal" capability valid bit checking. This is needed when reading the valid bit in situations where validity can change within the current function, such as around a deallocation. In all other circumstances, the existing non-temporal version should be preferred for better optimization.